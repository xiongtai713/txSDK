package ewasm

import (
	"context"
	"fmt"
	"io/ioutil"
	"log"
	"math/big"
	ethereum "pdx-chain"
	"pdx-chain/common"
	"pdx-chain/core/types"
	"pdx-chain/crypto"
	"pdx-chain/utopia/utils/client"
	"time"
)

var flagNo0x = "26cad4db1a82fab9e41bf5c0fbb4937a27b93786a4f27d3b9704805f698d3e65"

func IsWASM(code []byte) bool {
	fmt.Println([]byte("\000asm"))
	if len(code) < 4 || string(code[:4]) != "\000asm" {
		return false
	}
	return true
}

func DeployWasm(privKey string, client *client.Client, path string) common.Address {
	//wsam
	code, err := ioutil.ReadFile(path)

	//sol
	//code1,err:=hex.DecodeString("6060604052341561000f57600080fd5b6040516104c73803806104c783398101604052808051820191905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610081929190610088565b505061012d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c957805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f65782518255916020019190600101906100db565b5b5090506101049190610108565b5090565b61012a91905b8082111561012657600081600090555060010161010e565b5090565b90565b61038b8061013c6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610053578063a413686214610068578063cfae3217146100c557600080fd5b341561005e57600080fd5b610066610153565b005b341561007357600080fd5b6100c3600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506101e4565b005b34156100d057600080fd5b6100d86101fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101185780820151818401526020810190506100fd565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101e2576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b80600190805190602001906101fa9291906102a6565b5050565b610206610326565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102e757805160ff1916838001178555610315565b82800160010185558215610315579182015b828111156103145782518255916020019190600101906102f9565b5b509050610322919061033a565b5090565b602060405190810160405280600081525090565b61035c91905b80821115610358576000816000905550600101610340565b5090565b905600a165627a7a723058201ef87c90fca101864bb70ef1ac60d5510f2af93c1374d2c7c4f6ee8d40d9e4ba002900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000")

	fmt.Println(IsWASM(code))
	fmt.Println(code[:10])
	//if err != nil {
	//	log.Fatal("read fail", err)
	//	return
	//}
	fmt.Println("3333333", code[:9])

	//type Meta map[string][]byte

	//meta := Meta{"name": []byte("tonysu"), "version": []byte("1.2"), "desc": []byte("tony's new contract"), "jwt": []byte("eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJhayI6IjAzYTY0M2NmOGIwMmI1MDA1YjRlNDhhY2RjOTRhOGY2OTMzNTVhNGViNTEyOTJkNTUwOGI5N2YzZTYxNTllM2RlNiIsImwiOjYwMDAwMDAwMDAwLCJuIjoiZWVmZmZlZnJlcmVkZmZkc3V1ZjJycmZkc21mbGpsanJyIiwiciI6ImQiLCJzIjoxNzM0NzgsInNrIjoiMDI1OTVkNTUzNjk3MzA1Yzc2NzBkZmQ5MjYyOGU1ZmY2ODA4MDMzNTI2NWVkZjgwNGFlYTRlNmU4ZGY1MTEyNDY0In0.NZAOqpZ65LqDP5x0OS6ECGdSUPN2zlMGcsGPf4Ibij7_aQEOECC5HmoX-P7M0rPhjI_ssAntMdZJJhKs1jKC7w")}
	//metaByte, _ := json.Marshal(meta)
	//metaStr := hex.EncodeToString(metaByte)
	//strcode:=flagNo0x+"_"+hex.EncodeToString(code)+"_"+metaStr
	pri, err := crypto.HexToECDSA(privKey)
	if err != nil {
		log.Fatal("err", err)
		return common.Address{}
	}
	from := crypto.PubkeyToAddress(pri.PublicKey)
	fmt.Println("from", from.String())
	nonce, _ := client.EthClient.PendingNonceAt(context.Background(), from)
	if err != nil {
		log.Fatal("err2222", err)
		return common.Address{}
	}
	//strcode := common.(code)
	//fmt.Println("查询数据",strcode)
	//he:="0061736d0100000001610f60037f7f7f017f60027f7f017f60027f7f0060047f7f7f7f0060017f017f60017f006000017f60037f7f7f0060047f7f7f7f017f60077f7f7f7f7f7f7f0060000060057f7f7f7f7f017f60027e7f017f60017f017e60077f7f7f7f7f7f7f017f02a6010708657468657265756d0c73746f7261676553746f7265000208657468657265756d0d73746f7261676553746f726532000308657468657265756d0c73746f726167654c6f616432000308657468657265756d0f67657443616c6c4461746153697a65000608657468657265756d0c63616c6c44617461436f7079000708657468657265756d0666696e697368000208657468657265756d0b73746f726167654c6f616400020371700a02030001070201030b00090b0b01020e0c0101020101010101010103010702020307050301000302050307040b020207010101050107050505000802020008050800070101050504050a0104010008000101070207010101010a0105050a040a010401040a0d0505020505050505050405017001292905030100110609017f01418080c0000b071102066d656d6f72790200046d61696e0007092e010041010b2858595d0b2c0e7054206e551e3c64226f527131686972286a6b731521746d76111f3a75575e385f190aa9ad0170f61102077f017e23004190026b2200240020004180016a103020004180016a10332101200041003602c801200042013703c001200041c0016a4100200141016a2201411876103d200041c0016a41012001411076103d200041c0016a41022001410876103d200041c0016a41032001103d200041c8006a41086a20002802c801360200200020002903c001370348200041c8006a4100104c2d00002101200041c8006a4101104c2d00002102200041c8006a4102104c2d00002103200041c8006a4103104c2d00002104200041c8006a1050200041c0016a41186a4100360200200041c0016a41106a4200370300200041c0016a41086a22054200370300200042003703c001200020043a00df01200020033a00de01200020023a00dd01200020013a00dc0141a883c000200041c0016a1000200041286a10400240024020002802300d00200041286a10500c010b2005200041286a41086a280200360200200020002903283703c00120004180016a200041c0016a100d0240024002400240024002402000280280014101470d00200041d8006a20004180016a41146a280200360200200041d0006a2000418c016a29020037030020002000290284013703482000200041c8006a360270200041003602b801200042013703b001200041c0016a41146a4101360200200042013702c4012000418080c0003602c001200041093602a4012000200041a0016a3602d0012000200041f0006a3602a001200041b0016a200041c0016a10390d0120002802b401220220002802b8012201460d0420022001490d02024020010d00200041b0016a105041002101410121020c040b20002802b001200241012001105622020d032001410141002802bcf9412200410720001b110200000b200041c0006a2000418c016a28020036020020002000290284013703380c040b418880c0004137200041c0016a41fc81c000102b000b41b082c000103b000b200020013602b401200020023602b0010b200041386a41086a200041b0016a41086a280200360200200020002903b001370338200041c8006a10500b200041c0016a2000280238200028024041d483c000102e200041e0006a200041c0016a1016200041206a200041e0006a4100104b22012802002001280204100c02400240024020002802242201417f4c0d000240024020010d00200041003602c801200042013703c0010c010b200028022021022001410110602203450d02200041003602c801200020033602c001200020013602c401200220016a21040340200241016a21030240024020022c00002201417f4c0d00200141ff01712101200321020c010b0240024020032004470d0041002105200421030c010b200241026a210320022d0001413f7121050b2001411f"

	//decodeString, err := hex.DecodeString(he)

	//////marshal, _ := json.Marshal(strcode)
	msg := ethereum.CallMsg{
		From: from,
		Data: code, //code =wasm code1 =sol
	}

	gas, err := client.EthClient.EstimateGas(context.Background(), msg)
	if err != nil {
		fmt.Println("预估的gas err", err)
		return common.Address{}
	}

	fmt.Println("预估的gas", gas)
	return common.Address{}
	//for i:=0;i<=5;i++{
	fmt.Println("nonce", nonce)
	tx, err := types.SignTx(
		types.NewContractCreation(
			nonce,
			new(big.Int),
			gas,
			new(big.Int).Mul(big.NewInt(1e9), big.NewInt(18)),
			code),
		types.NewEIP155Signer(big.NewInt(111)),
		pri,
	)
	if err != nil {
		log.Fatal("tx err", err)
	}

	timeout, _ := context.WithTimeout(context.Background(), 2*time.Minute)
	log.Println("SendRawTransaction")
	hashes, err := client.SendRawTransaction(timeout, tx)
	if err != nil {
		log.Println("tx err", err)
	}
	fmt.Println("txHash", hashes.Hex())

	fmt.Println("合约地址", crypto.CreateAddress(from, tx.Nonce()).Hex())
	//nonce++
	//}
	return crypto.CreateAddress(from, tx.Nonce())
}

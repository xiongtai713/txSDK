package main

import (
	"context"
	"encoding/hex"
	"fmt"
	ethereum "pdx-chain"
	"pdx-chain/core/types"
	"pdx-chain/crypto"
	"pdx-chain/utopia/utils/client"

	"log"
	"math/big"
)

func main() {
	client, err := client.Connect("http://123.57.75.146:30100")
	//client, err := client.Connect("http://39.98.215.63:30100")

	//privKey := "a9f1481564399443bb39188d3f8da55585c9238ab175010b81e7a28956559381"
	privKey := "b7ffa182bbe247ff00e953547eb854b9b1dd1257889a407914e37472690160d7"

	pri, err := crypto.HexToECDSA(privKey)
	if err != nil {
		log.Fatal("err", err)
		return
	}
	from := crypto.PubkeyToAddress(pri.PublicKey)
	fmt.Println("from", from.String())
	nonce, err := client.EthClient.NonceAt(context.Background(), from,nil)
	if err != nil {
		log.Fatal("err2222", err)
		return
	}
	code, err := hex.DecodeString("608060405234801561001057600080fd5b506102a7806100206000396000f30060806040526004361061004b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663054c1a758114610050578063841321fd146100da575b600080fd5b34801561005c57600080fd5b50610065610135565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009f578181015183820152602001610087565b50505050905090810190601f1680156100cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156100e657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101339436949293602493928401919081908401838280828437509497506101cc9650505050505050565b005b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156101c15780601f10610196576101008083540402835291602001916101c1565b820191906000526020600020905b8154815290600101906020018083116101a457829003601f168201915b505050505090505b90565b80516101df9060009060208401906101e3565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061022457805160ff1916838001178555610251565b82800160010185558215610251579182015b82811115610251578251825591602001919060010190610236565b5061025d929150610261565b5090565b6101c991905b8082111561025d57600081556001016102675600a165627a7a72305820da4127a6e95f68f97561ea72893a4b4cf035d8a59bf39ad7348a3df781e844ba0029")




	msg := ethereum.CallMsg{
		From: from,
		Data: code, //code =wasm code1 =sol
	}

	gas, err := client.EthClient.EstimateGas(context.Background(), msg)
	if err != nil {
		fmt.Println("预估的gas err", err)
		return
	}
	//gas:=big.NewInt(0).Add(big.NewInt(40),big.NewInt(10e9))
	fmt.Println("预估的gas", gas)
	nonce=43
	for i:=0;i<2;i++{
	fmt.Println("nonce", nonce)
	tx, err := types.SignTx(
		types.NewContractCreation(
			nonce,
			new(big.Int),
			gas,
			new(big.Int).Mul(big.NewInt(1e9), big.NewInt(4000)),
			code),
		types.NewEIP155Signer(big.NewInt(739)),
		//types.NewSm2Signer(big.NewInt(777)),
		pri,
	)
	if err != nil {
		log.Fatal("tx err", err)
	}

	hashes, err := client.SendRawTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println("tx err", err)
		return
	}
	fmt.Println("txHash", hashes.Hex())

	fmt.Println("合约地址", crypto.CreateAddress(from, tx.Nonce()).Hex())
	nonce++
	}
}
